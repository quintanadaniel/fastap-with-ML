name: Build and push ECR image and deploy k8s with terraform

on:
  push:
    branches:
      - master

jobs:
  deploy:
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install "black[jupyter]"

      - name: Run black (Python code formatter)
        run: |
          black --check .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Build and push Docker image to ECR
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
          docker push ${{ secrets.ECR_REPOSITORY }}:latest
          echo "IMAGE_URL=${{ secrets.ECR_REPOSITORY }}:latest" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        if: success()
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: outputs
        run: |
          echo "Cluster Name=$(terraform output -raw cluster_name)" >> $GITHUB_ENV

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ env.Cluster_Name }}
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Apply Kubernetes Manifests
        run: kubectl apply -f k8s/

      - name: Set Image in Kubernetes Deployment
        run: kubectl set image deployment/image-detector-deployment image-detector=${{ env.IMAGE_URL }}

      - name: Wait for EKS Cluster to be Ready
        run: |
          until kubectl get nodes; do
            echo "Waiting for nodes to become ready..."
            sleep 20
          done