name: Deploy to EC2

on:
  push:
    branches:
      - master


jobs:
  deploy:
    environment: dev
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the latest code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Step 3: Install dependencies, including black
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run black to check code formatting
      - name: Run black (Python code formatter)
        run: |
          black --check .

      # Step 5: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 6: Build the Docker image
      - name: Build the Docker image
        run: |
          docker build --progress=plain -t ${{ secrets.DOCKER_IMAGE_NAME }} .

      - name: Check SSH private key format
        run: |
          echo "${{ secrets.SECRET_ACCESS_KEY }}" > key.pem
          cat key.pem

      - name: Check ssh-agent status
        run: |
          eval $(ssh-agent -s)
          ssh-add -l

      # Step 7: Add SSH key
      - name: Add SSH key
        run: |
          echo "${{ secrets.SECRET_ACCESS_KEY }}" > key.pem
          chmod 400 key.pem
          eval $(ssh-agent -s)
          ssh-add key.pem

      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOSTNAME }} "echo Connected successfully"

      # Step 8: Copy the Docker image to EC2 instance using SCP
      - name: Copy Docker image to EC2
        run: |
          docker save ${{ secrets.DOCKER_IMAGE_NAME }} | bzip2 | ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOSTNAME }} "bunzip2 | docker load"

      # Step 9: Deploy the Docker container on EC2
      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOSTNAME }} << 'EOF'
            docker stop fastapi_container || true
            docker rm fastapi_container || true
            docker run -d --name fastapi_container -p 80:80 ${{ secrets.DOCKER_IMAGE_NAME }}
          EOF


