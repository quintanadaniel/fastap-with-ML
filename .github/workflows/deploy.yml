name: Deploy to EC2

on:
  push:
    branches:
      - master


jobs:
  deploy:
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run black (Python code formatter)
        run: |
          black --check .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Build and push Docker image to ECR
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
          docker push ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Start ssh-agent and add SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SECRET_ACCESS_KEY }}

      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOSTNAME }} "echo Connected successfully"

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOSTNAME }} << 'EOF'
            # Log in to AWS ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

            # Pull the latest Docker image
            docker pull ${{ secrets.ECR_REPOSITORY }}:latest

            # Stop and remove the old container if it exists
            docker stop my-fastapi-app || true
            docker rm my-fastapi-app || true

            # Run the new Docker container
            docker run -d --name my-fastapi-app -p 80:80 ${{ secrets.ECR_REPOSITORY }}:latest
          EOF

      - name: Test deployed app
        run: |
          curl -f http://${{secrets.HOSTNAME}}/ || exit 1


